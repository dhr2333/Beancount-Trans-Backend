# 测试专用Docker镜像
# 基于生产环境Dockerfile，添加测试依赖和配置
# 优化构建缓存策略以提升构建速度

FROM python:3.12-slim AS builder

ENV PYTHONUNBUFFERED=1 \
    PYTHONDONTWRITEBYTECODE=1 \
    PIP_TRUSTED_HOST=pypi.tuna.tsinghua.edu.cn \
    PIP_DEFAULT_TIMEOUT=6000 \
    PIP_RETRIES=5

WORKDIR /build

# 配置镜像源并安装编译依赖（合并为一层减少镜像大小）
RUN sed -i 's/deb.debian.org/mirrors.tuna.tsinghua.edu.cn/g' /etc/apt/sources.list && \
    sed -i 's/security.debian.org/mirrors.tuna.tsinghua.edu.cn/g' /etc/apt/sources.list && \
    apt-get update && apt-get install -y --no-install-recommends \
    build-essential \
    python3-dev \
    libpq-dev \
    && rm -rf /var/lib/apt/lists/*

# 升级 pip 和安装基础工具
RUN --mount=type=cache,target=/root/.cache/pip \
    pip install -i https://repo.huaweicloud.com/repository/pypi/simple/ --upgrade pip wheel

# 安装所有依赖（包括测试依赖）
# 先复制 requirements.txt，利用 Docker 层缓存
COPY requirements.txt .
RUN --mount=type=cache,target=/root/.cache/pip \
    pip install -i https://repo.huaweicloud.com/repository/pypi/simple/ --user -r requirements.txt

# 安装预训练模型
# COPY pretrained_models/ /build/pretrained_models
# RUN --mount=type=cache,target=/root/.cache/pip \
#     pip install -i https://repo.huaweicloud.com/repository/pypi/simple/ --user torch==2.7.0 \
#     && pip install -i https://repo.huaweicloud.com/repository/pypi/simple/ --user openai \
#     && pip install -i https://repo.huaweicloud.com/repository/pypi/simple/ --user pandas \
#     && pip install -i https://repo.huaweicloud.com/repository/pypi/simple/ --user transformers \
#     && pip install -i https://repo.huaweicloud.com/repository/pypi/simple/ --user spacy \
#     && pip install --no-cache-dir --user /build/pretrained_models/zh_core_web_md-3.8.0-py3-none-any.whl \
#     && apt-get purge -y --auto-remove build-essential python3-dev

# 测试阶段：运行时镜像
FROM python:3.12-slim

LABEL maintainer="daihaorui <Dai_Haorui@163.com>"
LABEL purpose="test"

ENV PYTHONUNBUFFERED=1 \
    PATH="/root/.local/bin:${PATH}" \
    DJANGO_SETTINGS_MODULE="project.settings.test"

WORKDIR /app

# 配置镜像源并安装运行时依赖（合并为一层）
RUN sed -i 's/deb.debian.org/mirrors.tuna.tsinghua.edu.cn/g' /etc/apt/sources.list && \
    sed -i 's/security.debian.org/mirrors.tuna.tsinghua.edu.cn/g' /etc/apt/sources.list && \
    apt-get update && apt-get install -y --no-install-recommends \
    libgomp1 \
    libexpat1 \
    libpq5 \
    && rm -rf /var/lib/apt/lists/*

# 从 builder 阶段复制 Python 包
COPY --from=builder /root/.local /root/.local
# COPY --from=builder /build/pretrained_models/bert-base-chinese /app/pretrained_models/bert-base-chinese

# 复制配置文件（不常变更的文件放前面以利用缓存）
COPY pyproject.toml .coveragerc ./
COPY bin ./bin
COPY conf ./conf

# 创建必要的目录并设置权限
RUN mkdir -p /app/reports /app/logs && \
    chmod +x /app/bin/*.sh 2>/dev/null || true

# 复制模板文件
COPY templates ./templates

# 最后复制经常变更的代码文件（最大化缓存利用率）
COPY manage.py ./
COPY project ./project

# 默认命令：运行 pytest（参数在 pyproject.toml 中配置）
CMD ["pytest"]
